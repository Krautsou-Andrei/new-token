// automatically generated from `@stdlib/std/stdlib.fc` `/Users/a1/Downloads/JettonStaking 2/build/Jetton/tact_JettonMaster.fc` 
PROGRAM{
  DECLPROC __tact_load_address_opt
  DECLPROC __tact_store_address_opt
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $TokenTransferInternal$_store
  DECLPROC $TokenTransferInternal$_store_cell
  DECLPROC $TokenBurnNotification$_load_without_opcode
  DECLPROC $TokenExcesses$_store
  DECLPROC $TokenExcesses$_store_cell
  DECLPROC $TokenUpdateContent$_load_without_opcode
  DECLPROC $ProvideWalletAddress$_load_without_opcode
  DECLPROC $TakeWalletAddress$_store
  DECLPROC $TakeWalletAddress$_store_cell
  DECLPROC $Mint$_load_without_opcode
  DECLPROC $JettonMaster$_store
  DECLPROC $JettonMaster$_load
  DECLPROC $StateInit$_get_code
  DECLPROC $Context$_get_value
  DECLPROC $JettonData$_to_external
  DECLPROC $JettonWallet$init$_store
  DECLPROC $JettonMaster$init$_load
  DECLPROC $JettonMaster$_contract_init
  DECLPROC $JettonMaster$_contract_load
  DECLPROC $JettonMaster$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $JettonWallet$_init_child
  DECLPROC $SendParameters$_constructor_to_value_bounce_mode_body_code_data
  DECLPROC $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload
  DECLPROC $JettonMaster$_fun_getJettonWalletInit
  DECLPROC $JettonMaster$_fun_mint
  DECLPROC $JettonMaster$_fun_requireSenderAsWalletOwner
  DECLPROC $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code
  DECLPROC $JettonMaster$_fun_get_jetton_data
  DECLPROC $JettonMaster$_fun_get_wallet_address
  DECLPROC $JettonMaster$_fun_requireOwner
  DECLPROC $JettonMaster$_fun_owner
  DECLPROC $SendParameters$_constructor_to_value_bounce_mode_body
  DECLPROC $TokenExcesses$_constructor_query_id
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address
  106029 DECLMETHOD %get_jetton_data
  103289 DECLMETHOD %get_wallet_address
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_load_address_opt PROCINLINE:<{
    DUP
    2 PLDU
    0 NEQINT
    IF:<{
      LDMSGADDR
      SWAP
    }>ELSE<{
      2 PUSHINT
      SDSKIPFIRST
      PUSHNULL
    }>
  }>
  __tact_store_address_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      b{00} STSLICECONST
    }>ELSE<{
      STSLICER
    }>
  }>
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $TokenTransferInternal$_store PROCINLINE:<{
    395134233 PUSHINT
    s0 s7 XCHG2
    32 STU
    s1 s5 XCHG
    64 STU
    s0 s3 XCHG2
    STVARUINT16
    SWAP
    STSLICER
    SWAP
    __tact_store_address_opt INLINECALLDICT
    SWAP
    STVARUINT16
    SWAP
    STSLICER
  }>
  $TokenTransferInternal$_store_cell PROCINLINE:<{
    NEWC
    6 -ROLL
    $TokenTransferInternal$_store INLINECALLDICT
    ENDC
  }>
  $TokenBurnNotification$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    __tact_load_address_opt INLINECALLDICT
    s1 s4 XCHG
    s3 s3 s0 XCHG3
  }>
  $TokenExcesses$_store PROCINLINE:<{
    3576854235 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $TokenExcesses$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $TokenExcesses$_store INLINECALLDICT
    ENDC
  }>
  $TokenUpdateContent$_load_without_opcode PROCINLINE:<{
    LDREF
    SWAP
  }>
  $ProvideWalletAddress$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDMSGADDR
    1 LDI
    3 -ROLL
  }>
  $TakeWalletAddress$_store PROCINLINE:<{
    3513996288 PUSHINT
    s0 s4 XCHG2
    32 STU
    s1 s2 XCHG
    64 STU
    SWAP
    STSLICER
    SWAP
    STSLICER
  }>
  $TakeWalletAddress$_store_cell PROCINLINE:<{
    NEWC
    3 -ROLL
    $TakeWalletAddress$_store INLINECALLDICT
    ENDC
  }>
  $Mint$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $JettonMaster$_store PROCINLINE:<{
    s4 s5 XCHG2
    257 PUSHINT
    STIX
    ROT
    STSLICER
    STREF
    1 STI
    SWAP
    STVARUINT16
  }>
  $JettonMaster$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDREF
    1 LDI
    LDVARUINT16
    5 -ROLL
  }>
  $StateInit$_get_code PROCINLINE:<{
    DROP
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $JettonData$_to_external PROCINLINE:<{
  }>
  $JettonWallet$init$_store PROCINLINE:<{
    -ROT
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonMaster$init$_load PROCINLINE:<{
    LDMSGADDR
    LDREF
    257 PUSHINT
    LDIX
    3 -ROLL
  }>
  $JettonMaster$_contract_init PROCINLINE:<{
    0 PUSHINT
    3 -ROLL
    TRUE
    SWAP
  }>
  $JettonMaster$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $JettonMaster$_load INLINECALLDICT
      1 5 BLKDROP2
    }>ELSE<{
      $JettonMaster$init$_load INLINECALLDICT
      s0 s3 XCHG
      ENDS
      ROT
      $JettonMaster$_contract_init INLINECALLDICT
    }>
  }>
  $JettonMaster$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    5 -ROLL
    $JettonMaster$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $JettonWallet$_init_child PROCINLINE:<{
        B{b5ee9c720102120100054a00022cff008e88f4a413f4bcf2c80bed53208e8130e1ed43d90102020271030404b401d072d721d200d200fa4021103450666f04f86102f862ed44d0d200019afa00fa40fa4055206c139afa40fa405902d1017059e204e30202d70d1ff2e0822182100f8a7ea5bae302218210178d4519bae302018210595f07bcba0708090a0147bfd8176a268690000cd7d007d207d202a903609cd7d207d202c816880b82cf16d9e361a405014bbc9bcf6a268690000cd7d007d207d202a903609cd7d207d202c816880b82cf12a816d9e3618c06002c5cf82ac87001ca005a59cf1601cf16c9305463305230007a21f82ac87001ca005a59cf1601cf16c9705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d000c2028020d7217021d749c21f9430d31f01de208210178d4519ba8e1d30d33ffa00596c21a002c87f01ca0055205afa0258cf1601cf16c9ed54e082107bdd97deba8e1cd33ffa00596c21a002c87f01ca0055205afa0258cf1601cf16c9ed54e05f0401fa31d33ffa00fa4020d70b01c30093fa40019472d7216de201f404fa00516616151443303236f8416f2481114d53c3c705f2f443305230fa40fa0071d721fa00fa00306c6170f83aaa0082098cba80a0820921eac0a027a001813ebb02bcf2f45163a18200f5fc21c2fff2f45128f82ac87001ca005a59cf1601cf16c95c0b01fe31d33ffa00fa4020d70b01c30093fa40019472d7216de201fa0051551514433036f8416f2453c2c705b38e4a536cf82ac87001ca005a59cf1601cf16c9018200a6d402705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d05240c705f2f4de51a7a08200f5fc210d01dc8ee6d33ffa0020d70b01c30093fa40019472d7216de201f40455303033f8416f2481114d5393c705f2f45174a18200f5fc21c2fff2f443305238fa40fa0071d721fa00fa00306c6170f83a8200a99e0182098cba80a0820921eac0a012bcf2f47080405413267f06e05f04f2c0821101fe705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d050657080407f2c471350bcc855508210178d45195007cb1f15cb3f5003fa0201cf1601206e9430cf848092cf16e201fa0201cf16c9104610574014030710465522c8cf8580ca00cf8440ce01fa028069cf400c0066025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0002c87f01ca0055205afa0258cf1601cf16c9ed54039cc2fff2f440bc2bdb3c10344dcbfa40fa0071d721fa00fa00306c6170f83a22c200953036135f03e30d206eb39323c2009170e29410235f03e30d59c87f01ca0055205afa0258cf1601cf16c9ed540e0f10002cf8276f1021a1820921eac066b608a18208c65d40a0a100ca5182a15008a171702747135069c8553082107362d09c5005cb1f13cb3f01fa0201cf1601cf16c9294314450010246d50436d03c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00102300a0206ef2d0807002c8018210d53276db58cb1fcb3fc91344407150346d036d5520c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0000e2c8553082107bdd97de5005cb1f13cb3f01fa0201cf1601206e9430cf848092cf16e2c926504410246d50436d03c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0002c87f01ca0055205afa0258cf1601cf16c9ed54} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    2SWAP
    $JettonWallet$init$_store INLINECALLDICT
    ENDC
  }>
  $SendParameters$_constructor_to_value_bounce_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    s5 s3 s3 XCHG3
    s0 s4 XCHG
  }>
  $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload PROCINLINE:<{
  }>
  $JettonMaster$_fun_getJettonWalletInit PROCREF:<{
        MYADDR
    $JettonWallet$_init_child INLINECALLDICT
  }>
  $JettonMaster$_fun_mint PROCREF:<{
    18668 PUSHINT
    s5 PUSH
    THROWANYIFNOT
    s7 s1 XCPU
    ADD
    5 2 BLKSWAP
    $JettonMaster$_fun_getJettonWalletInit INLINECALLDICT
    2DUP
    $global_contractAddress INLINECALLDICT
    0 PUSHINT
    TRUE
    64 PUSHINT
    s2 PUSH
        MYADDR
    OVER
        NEWC
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
    s3 s5 XCHG
    s4 s15 XCHG
    s2 s3 XCHG
    s2 16 s() XCHG
    $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload INLINECALLDICT
    $TokenTransferInternal$_store_cell INLINECALLDICT
    s6 s5 s0 XCHG3
    s4 s11 XCHG
    s3 s10 XCHG
    s0 s11 s10 XCHG3
    $SendParameters$_constructor_to_value_bounce_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    s0 s3 s4 XCHG3
  }>
  $JettonMaster$_fun_requireSenderAsWalletOwner PROCREF:<{
    __tact_context_get INLINECALLDICT
    s2 s3 XCHG
    3 BLKDROP
    6 -ROLL
    $JettonMaster$_fun_getJettonWalletInit INLINECALLDICT
    SWAP
    4429 PUSHINT
    s0 s2 XCHG
    $global_contractAddress INLINECALLDICT
    s1 s7 XCHG
    SDEQ
    s1 s6 XCHG
    THROWANYIFNOT
    4 ROLL
  }>
  $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code PROCINLINE:<{
  }>
  $JettonMaster$_fun_get_jetton_data PROCREF:<{
        MYADDR
    s4 s(-1) PUXC
    $JettonWallet$_init_child INLINECALLDICT
    $StateInit$_get_code INLINECALLDICT
    s5 s2 s(-2) PU2XC
    s6 s5 s(-2) PU2XC
    $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code INLINECALLDICT
  }>
  $JettonMaster$_fun_get_wallet_address PROCREF:<{
        MYADDR
    $JettonWallet$_init_child INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $JettonMaster$_fun_requireOwner PROCREF:<{
    __tact_context_get_sender INLINECALLDICT
    s4 s(-1) PUXC
    SDEQ
    132 THROWIFNOT
  }>
  $JettonMaster$_fun_owner PROCREF:<{
    s3 PUSH
  }>
  $SendParameters$_constructor_to_value_bounce_mode_body PROCINLINE:<{
    s1 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s3 s3 XCHG2
  }>
  $TokenExcesses$_constructor_query_id PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address PROCINLINE:<{
  }>
  %get_jetton_data PROC:<{
    $JettonMaster$_contract_load INLINECALLDICT
    $JettonMaster$_fun_get_jetton_data INLINECALLDICT
    5 5 BLKDROP2
    $JettonData$_to_external INLINECALLDICT
  }>
  %get_wallet_address PROC:<{
    $JettonMaster$_contract_load INLINECALLDICT
    5 ROLL
    $JettonMaster$_fun_get_wallet_address INLINECALLDICT
    5 1 BLKDROP2
  }>
  %owner PROC:<{
    $JettonMaster$_contract_load INLINECALLDICT
    $JettonMaster$_fun_owner INLINECALLDICT
    5 1 BLKDROP2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $JettonMaster$_contract_load INLINECALLDICT
    s0 s6 XCHG
    IFJMP:<{
      6 BLKDROP
    }>
    s4 PUSH
    SBITS
    31 GTINT
    IF:<{
      s0 s4 XCHG
      32 LDU
      OVER
      4235234258 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        $Mint$_load_without_opcode INLINECALLDICT
        s2 POP
        __tact_context_get INLINECALLDICT
        s2 s3 XCHG
        3 BLKDROP
        s4 PUSH
        14534 PUSHINT
        s0 s2 XCHG
        SDEQ
        THROWANYIFNOT
        3688 PUSHINT
        s6 PUSH
        THROWANYIFNOT
        12241 PUSHINT
        s5 s1 PUSH2
        ADD
        s8 PUSH
        LEQ
        THROWANYIFNOT
        s3 PUSH
        s5 s7 XCHG
        s0 s6 XCHG
        s3 s5 XCHG
        s0 s4 XCHG
        $JettonMaster$_fun_mint INLINECALLDICT
        $JettonMaster$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2937889386 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        $TokenUpdateContent$_load_without_opcode INLINECALLDICT
        NIP
        s3 s4 XCHG
        s1 s3 s5 XCHG3
        $JettonMaster$_fun_requireOwner INLINECALLDICT
        s2 POP
        s3 s4 XCHG
        s3 s0 s0 XCHG3
        $JettonMaster$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2078119902 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        $TokenBurnNotification$_load_without_opcode INLINECALLDICT
        s4 POP
        s5 s6 XCHG
        s4 s6 XCHG
        s3 s6 XCHG
        s7 s8 s0 XCHG3
        $JettonMaster$_fun_requireSenderAsWalletOwner INLINECALLDICT
        s4 s7 XCHG2
        SUB
        s4 PUSH
        ISNULL
        NOT
        IF:<{
          s0 s4 XCHG
          __tact_not_null INLINECALLDICT
          0 PUSHINT
          FALSE
          64 PUSHINT
          s0 s8 XCHG
          $TokenExcesses$_constructor_query_id INLINECALLDICT
          $TokenExcesses$_store_cell INLINECALLDICT
          s3 s4 XCHG
          s1 s3 s0 XCHG3
          s1 s8 XCHG
          $SendParameters$_constructor_to_value_bounce_mode_body INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>ELSE<{
          s4 POP
          s4 POP
        }>
        s4 s1 s3 XCHG3
        s0 s2 XCHG
        $JettonMaster$_contract_store INLINECALLDICT
        RETALT
      }>
      SWAP
      745978227 PUSHINT
      EQUAL
      IFJMP:<{
        $ProvideWalletAddress$_load_without_opcode INLINECALLDICT
        s3 POP
        23951 PUSHINT
        __tact_context_get INLINECALLDICT
        $Context$_get_value INLINECALLDICT
        6100000 PUSHINT
        GEQ
        THROWANYIFNOT
            MYADDR
        s1 s(-1) PUXC
        $JettonWallet$_init_child INLINECALLDICT
        s0 s4 XCHG
        IF:<{
          __tact_context_get_sender INLINECALLDICT
          0 PUSHINT
          s0 s2 XCHG
          64 PUSHINT
          s0 s6 XCHG
          $global_contractAddress INLINECALLDICT
          TRUE
              NEWC
              1 STI
          s0 s4 XCHG2
              STSLICER
              ENDC
          $Cell$_fun_asSlice INLINECALLDICT
          s4 s3 s0 XCHG3
          $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address INLINECALLDICT
          $TakeWalletAddress$_store_cell INLINECALLDICT
          s1 s3 XCHG
          $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>ELSE<{
          NIP
          __tact_context_get_sender INLINECALLDICT
          0 PUSHINT
          s0 s2 XCHG
          64 PUSHINT
          s0 s5 XCHG
          $global_contractAddress INLINECALLDICT
          FALSE
              NEWC
              1 STI
              ENDC
          $Cell$_fun_asSlice INLINECALLDICT
          s2 s4 XCHG
          $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address INLINECALLDICT
          $TakeWalletAddress$_store_cell INLINECALLDICT
          s1 s3 s0 XCHG3
          $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
              NEWC
              b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
              1 STI               // store `bounce`
              b{000} STSLICECONST // store bounced = false and src = addr_none
              STSLICE             // store `to`
              SWAP
              STGRAMS             // store `value`
              105 PUSHINT         // 1 + 4 + 4 + 64 + 32
              STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
              // → Stack state
              // s0: Builder
              // s1: `data`
              // s2: `code`
              // s3: `body`
              // s4: `mode`
              // Group 2: Placing the Builder after code and data, then checking those for nullability
              s2 XCHG0
              DUP2
              ISNULL
              SWAP
              ISNULL
              AND
              // → Stack state
              // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
              // s1: `code`
              // s2: `data`
              // s3: Builder
              // s4: `body`
              // s5: `mode`
              // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
              <{
                  DROP2 // drop `data` and `code`, since either of those is null
                  b{0} STSLICECONST
              }> PUSHCONT
              // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
              <{
                  // _ split_depth:(Maybe (## 5))
                  //   special:(Maybe TickTock)
                  //   code:(Maybe ^Cell)
                  //   data:(Maybe ^Cell)
                  //   library:(Maybe ^Cell)
                  // = StateInit;
                  ROT                // place message Builder on top
                  b{10} STSLICECONST // store Maybe = true, Either = false
                  // Start composing inlined StateInit
                  b{00} STSLICECONST // store split_depth and special first
                  STDICT             // store code
                  STDICT             // store data
                  b{0} STSLICECONST  // store library
              }> PUSHCONT
              // Group 3: IFELSE that does the branching shown above
              IFELSE
              // → Stack state
              // s0: Builder
              // s1: null or StateInit
              // s2: `body`
              // s3: `mode`
              // Group 4: Finalizing the message
              STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
              ENDC
              // → Stack state
              // s0: Cell
              // s1: `mode`
              // Group 5: Sending the message, with `mode` on top
              SWAP
              SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        }>
        s0 s3 s4 XCHG3
        $JettonMaster$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s4 XCHG
    }>
    s0 s4 XCHG
    HASHSU
    DUP
    12989249699848615321738326570051900597660651872735660686463813757164122477106 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      s2 s3 XCHG
      3 BLKDROP
      3688 PUSHINT
      s5 PUSH
      THROWANYIFNOT
      12241 PUSHINT
      s4 PUSH
      100 ADDCONST
      s7 PUSH
      LEQ
      THROWANYIFNOT
      s3 s5 XCHG
      100 PUSHINT
      s3 PUSH
      s0 s6 XCHG
      s3 s5 XCHG
      s0 s4 XCHG
      $JettonMaster$_fun_mint INLINECALLDICT
      $JettonMaster$_contract_store INLINECALLDICT
    }>
    s4 POP
    s0 s3 XCHG
    108519163993181819042242548615384168278253380060143639211009517333780023512881 PUSHINT
    EQUAL
    IFJMP:<{
      __tact_context_get INLINECALLDICT
      s2 s3 XCHG
      3 BLKDROP
      OVER
      14534 PUSHINT
      s0 s2 XCHG
      SDEQ
      THROWANYIFNOT
      s0 s0 s3 XCHG3
      FALSE
      SWAP
      $JettonMaster$_contract_store INLINECALLDICT
    }>
    4 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
